$color-base: $bg-accent;
$color-base-side: $bg-tertiary;
$number-of-falls: 12;
$fall-slice: calc(100 / $number-of-falls);
$increment: 2.5;

.falling {
  position: absolute;
  width: calc(100vw / $number-of-falls);
  min-height: calc(var(--waterfall-height));
  z-index: 3;

  border-bottom-left-radius: $border-radius;
  border-bottom-right-radius: $border-radius;

  @for $i from 0 to $number-of-falls {
    &:nth-child(#{$i + 1}) {
      $col: $i * $increment;

      left: #{calc($i * $fall-slice)} + '%';
      background-color: darken($color-base, $col);
    }
  }
}

.sideways {
  position: absolute;
  height: #{calc(var(--waterfall-height) / $number-of-falls)};
  width: 100%;
  z-index: 4;

  @for $i from $number-of-falls + 1 to $number-of-falls * 2 + 1 {
    &:nth-child(#{$i}) {
      $col: $i * $increment;

      top: #{calc(($i - $number-of-falls - 1) * $fall-slice)} + '%';
      background-color: darken($color-base-side, $col);
    }
  }
}

#hero-section {
  background: url('../../../public/assets/images/circles.svg') no-repeat;
  background-size: cover;
}

$startColor: $bg-primary;
$endColor: $bg-tertiary;
$divider: 255;
$steps: 12;
$scaler: $divider / $steps;

@for $i from 1 through $steps {
  $scaledStep: $i * $scaler;
  $redStart: red($startColor);
  $greenStart: green($startColor);
  $blueStart: blue($startColor);
  $redEnd: red($endColor);
  $greenEnd: green($endColor);
  $blueEnd: blue($endColor);

  $R: ($redStart * (($divider - $scaledStep) / $divider)) +
    ($redEnd * ($scaledStep / $divider));
  $G: ($greenStart * (($divider - $scaledStep) / $divider)) +
    ($greenEnd * ($scaledStep / $divider));
  $B: ($blueStart * (($divider - $scaledStep) / $divider)) +
    ($blueEnd * ($scaledStep / $divider));

  // $height: calc($height - $dec);
  .spacer-#{$i} {
    background: rgb($R, $G, $B);
    height: calc(100vh / $steps);
  }
}

.line-v {
  width: 2px;
  height: 100%;
  background-color: rgb(255, 0, 187);
}
.line-h {
  width: 100%;
  height: 2px;
  background-color: rgb(255, 132, 0);
}

#hexagon-aniamtion {
  & > * {
    transform: rotate(0deg);
    transform-origin: center;

    animation-name: rotate;
    animation-timing-function: linear;
    animation-iteration-count: infinite;
    animation-direction: normal;
    animation-fill-mode: forwards;

    &:nth-child(1) {
      animation-delay: 0s;
      animation-duration: 6s;
    }
    &:nth-child(2) {
      animation-delay: 3s;
      animation-duration: 8s;
    }
    &:nth-child(3) {
      animation-delay: 4s;
      animation-duration: 10s;
    }
    &:nth-child(4) {
      animation-delay: 6s;
      animation-duration: 12s;
    }
  }
}

@keyframes rotate {
  to {
    transform: rotate(360deg);
  }
}
